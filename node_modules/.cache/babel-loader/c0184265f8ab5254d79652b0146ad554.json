{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore'; // Import the functions you need from the SDKs you need\n\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCEOzhWd_nQlYea3XL18ijzz2PLR0U-uGo\",\n  authDomain: \"misiontic-d982c.firebaseapp.com\",\n  databaseURL: \"https://misiontic-d982c-default-rtdb.firebaseio.com\",\n  projectId: \"misiontic-d982c\",\n  storageBucket: \"misiontic-d982c.appspot.com\",\n  messagingSenderId: \"824383049695\",\n  appId: \"1:824383049695:web:3a8020841820e12eb87e6a\",\n  measurementId: \"G-S3BVPZTSG3\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nconst auth = firebase.auth();\nconst db = firebase.firestore();\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\n\nconst signInWithGoogle = async () => {\n  try {\n    const res = await auth.signInWithPopup(googleProvider);\n    const user = res.user;\n    const query = await db.collection(\"users\").where(\"uid\", \"==\", user.uid).get();\n\n    if (query.docs.length === 0) {\n      await db.collection(\"users\").add({\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email,\n        rol: \"vendedor\",\n        estado: \"pendiente\"\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst signInWithEmailAndPassword = async (email, password) => {\n  try {\n    await auth.signInWithEmailAndPassword(email, password);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst registerWithEmailAndPassword = async (name, email, password) => {\n  try {\n    const res = await auth.createUserWithEmailAndPassword(email, password);\n    const user = res.user;\n    await db.collection(\"users\").add({\n      uid: user.uid,\n      name,\n      authProvider: \"local\",\n      email,\n      rol: \"vendedor\",\n      estado: \"pendiente\"\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst sendPasswordResetEmail = async email => {\n  try {\n    await auth.sendPasswordResetEmail(email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst logout = () => {\n  auth.signOut();\n};\n\nexport { auth, db, signInWithGoogle, signInWithEmailAndPassword, registerWithEmailAndPassword, sendPasswordResetEmail, logout };","map":{"version":3,"sources":["C:/Users/JOSEJ/Desktop/MinticProyecto/Proyecto-MinTic/src/firebase.js"],"names":["firebase","initializeApp","getAnalytics","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","googleProvider","GoogleAuthProvider","signInWithGoogle","res","signInWithPopup","user","query","collection","where","uid","get","docs","length","add","name","displayName","authProvider","email","rol","estado","err","console","error","alert","message","signInWithEmailAndPassword","password","registerWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","logout","signOut"],"mappings":"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","sourcesContent":["import firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\n\r\n\r\n// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCEOzhWd_nQlYea3XL18ijzz2PLR0U-uGo\",\r\n  authDomain: \"misiontic-d982c.firebaseapp.com\",\r\n  databaseURL: \"https://misiontic-d982c-default-rtdb.firebaseio.com\",\r\n  projectId: \"misiontic-d982c\",\r\n  storageBucket: \"misiontic-d982c.appspot.com\",\r\n  messagingSenderId: \"824383049695\",\r\n  appId: \"1:824383049695:web:3a8020841820e12eb87e6a\",\r\n  measurementId: \"G-S3BVPZTSG3\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nconst auth = firebase.auth();\r\nconst db = firebase.firestore();     \r\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\nconst signInWithGoogle = async () => {\r\n  try {\r\n    const res = await auth.signInWithPopup(googleProvider);\r\n    const user = res.user;\r\n    const query = await db\r\n      .collection(\"users\")\r\n      .where(\"uid\", \"==\", user.uid)\r\n      .get();\r\n    if (query.docs.length === 0) {\r\n      await db.collection(\"users\").add({\r\n        uid: user.uid,\r\n        name: user.displayName,\r\n        authProvider: \"google\",\r\n        email: user.email,\r\n        rol:\"vendedor\",\r\n        estado:\"pendiente\"\r\n      });\r\n    }\r\n  } catch (err) {\r\n    console.error(err);\r\n    alert(err.message);\r\n  }\r\n};\r\n\r\nconst signInWithEmailAndPassword = async (email, password) => {\r\n    try {\r\n      await auth.signInWithEmailAndPassword(email, password);\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(err.message);\r\n    }\r\n  };\r\n\r\n  const registerWithEmailAndPassword = async (name, email, password) => {\r\n    try {\r\n      const res = await auth.createUserWithEmailAndPassword(email, password);\r\n      const user = res.user;\r\n      await db.collection(\"users\").add({\r\n        uid: user.uid,\r\n        name,\r\n        authProvider: \"local\",\r\n        email,\r\n        rol:\"vendedor\",\r\n        estado:\"pendiente\"\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(err.message);\r\n    }\r\n  };\r\n\r\n  const sendPasswordResetEmail = async (email) => {\r\n    try {\r\n      await auth.sendPasswordResetEmail(email);\r\n      alert(\"Password reset link sent!\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(err.message);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    auth.signOut();\r\n  };\r\n\r\n  export {\r\n    auth,\r\n    db,\r\n    signInWithGoogle,\r\n    signInWithEmailAndPassword,\r\n    registerWithEmailAndPassword,\r\n    sendPasswordResetEmail,\r\n    logout,\r\n  };"]},"metadata":{},"sourceType":"module"}